"City:", CITY, "<br>",
"State:", STATE, "<br>",
"Zipcode:", ZIPCODE, "<br>",
"Admission Fee:", ADMISSION_FEE
)
)
data <- data.frame(HOSPITALS)
data <- data.frame(Hospitals)
# Create a leaflet map with circle markers for geographic locations
leaflet(data = data) %>%
addProviderTiles("Esri.WorldImagery") %>%
addCircleMarkers(
lat = ~LATITUDE,
lng = ~LONGITUDE,
label = paste(
"Address:", ADDRESS, "<br>",
"Street Name:", STREET_NAME, "<br>",
"Suffix:", SUFX, "<br>",
"City:", CITY, "<br>",
"State:", STATE, "<br>",
"Zipcode:", ZIPCODE, "<br>",
"Admission Fee:", ADMISSION_FEE
)
)
data
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- as.character(data$HEALTH_CENTER)
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels)
# Show the map
m
# Extracting necessary columns for labels
label_data <- data[, c("HEALTH_CENTER", "ADDRESS", "STREET_NAME", "CITY", "ZIPCODE", "ADMISSION_FEE")]
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = labels,
labelOptions = labelOptions(noHide = TRUE, direction = 'auto'),
label = lapply(1:nrow(label_data), function(i) {
paste(
"<strong>Health Center:</strong>", label_data[i, "HEALTH_CENTER"], "<br>",
"<strong>Address:</strong>", label_data[i, "ADDRESS"], "<br>",
"<strong>Street Name:</strong>", label_data[i, "STREET_NAME"], "<br>",
"<strong>City:</strong>", label_data[i, "CITY"], "<br>",
"<strong>Pincode:</strong>", label_data[i, "ZIPCODE"], "<br>",
"<strong>Admission Fee:</strong>", label_data[i, "ADMISSION_FEE"]
)
})
)
# Extracting necessary columns for labels
label_data <- data[, c("HEALTH_CENTER", "ADDRESS", "STREET_NAME", "CITY", "ZIPCODE", "ADMISSION_FEE")]
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = labels,
labelOptions = labelOptions(noHide = TRUE, direction = 'auto'),
label = lapply(1:nrow(label_data), function(i) {
paste(
"<strong>Health Center:</strong>", label_data[i, "HEALTH_CENTER"], "<br>",
"<strong>Address:</strong>", label_data[i, "ADDRESS"], "<br>",
"<strong>Street Name:</strong>", label_data[i, "STREET_NAME"], "<br>",
"<strong>City:</strong>", label_data[i, "CITY"], "<br>",
"<strong>Pincode:</strong>", label_data[i, "ZIPCODE"], "<br>",
"<strong>Admission Fee:</strong>", label_data[i, "ADMISSION_FEE"]
)
})
)
# Extracting necessary columns for labels
label_data <- data[, c("HEALTH_CENTER", "ADDRESS", "STREET_NAME", "CITY", "ZIPCODE", "ADMISSION_FEE")]
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = lapply(1:nrow(label_data), function(i) {
paste(
"<strong>Health Center:</strong>", label_data[i, "HEALTH_CENTER"], "<br>",
"<strong>Address:</strong>", label_data[i, "ADDRESS"], "<br>",
"<strong>Street Name:</strong>", label_data[i, "STREET_NAME"], "<br>",
"<strong>City:</strong>", label_data[i, "CITY"], "<br>",
"<strong>Pincode:</strong>", label_data[i, "ZIPCODE"], "<br>",
"<strong>Admission Fee:</strong>", label_data[i, "ADMISSION_FEE"]
)
}),
labelOptions = labelOptions(noHide = TRUE, direction = 'auto')
)
# Show the map
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- paste(
"<b>Health Center:</b>", data$HEALTH_CENTER,
"<br><b>Address:</b>", data$ADDRESS,
"<br><b>Admission Fee:</b>", data$ADMISSION_FEE
)
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels, labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE))
# Show the map
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- paste(
data$HEALTH_CENTER, data$ADDRESS,data$ADMISSION_FEE
)
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels, labelOptions = labelOptions(noHide = TRUE, direction = "top", textOnly = TRUE))
# Show the map
m
# Extracting necessary columns for labels
label_data <- data[, c("HEALTH_CENTER", "ADDRESS", "STREET_NAME", "CITY", "ZIPCODE", "ADMISSION_FEE")]
# Create a leaflet map with circle markers
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = labels,
labelOptions = labelOptions(noHide = TRUE, direction = 'auto'),
label = lapply(1:nrow(label_data), function(i) {
paste(
"<strong>Health Center:</strong>", label_data[i, "HEALTH_CENTER"], "<br>",
"<strong>Address:</strong>", label_data[i, "ADDRESS"], "<br>",
"<strong>Street Name:</strong>", label_data[i, "STREET_NAME"], "<br>",
"<strong>City:</strong>", label_data[i, "CITY"], "<br>",
"<strong>Pincode:</strong>", label_data[i, "ZIPCODE"], "<br>",
"<strong>Admission Fee:</strong>", label_data[i, "ADMISSION_FEE"]
)
})
)
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- as.character(data$HEALTH_CENTER)
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels)
# Show the map
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- as.character(data$HEALTH_CENTER, data$ADDRESS,data$ADMISSION_FEE)
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels)
# Show the map
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- as.character(data$HEALTH_CENTER,data$ADDRESS,data$ADMISSION_FEE)
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels)
# Show the map
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
labels <- as.character(data$ADMISSION_FEE)
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations, label = labels)
# Show the map
m
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations,
label=paste(" Coverage cost = ", data$hospital_onset_covid_coverage, "Type=",data_range))
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations,
label=paste(" Coverage cost = ", data$HOSPITAL_NAME, "Type=",data$ADMISSION FEE))
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(data = locations,
label=paste(" Coverage cost = ", data$HOSPITAL_NAME, "Type=",data$ADMISSION FEE))%>%
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("Coverage cost =", data$HEALTH_CENTER, "Type =", data$ADMISSION_FEE)
)
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("Coverage cost =", data$HEALTH_CENTER, ", Admission Fee =", data$ADMISSION_FEE)
)
m
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("Coverage cost =", data$HEALTH_CENTER, ", Admission Fee =", data$ADMISSION_FEE, "<br>", "Hello")
)
m
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("Coverage cost =", data$HEALTH_CENTER, ", Admission Fee =", data$ADMISSION_FEE, <br>, "Hello")
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("Coverage cost =", data$HEALTH_CENTER, ", Admission Fee =", data$ADMISSION_FEE, "\n Hello")
)
m
# Extracting latitude, longitude, and labels from your data
locations <- data[, c("LATITUDE", "LONGITUDE")]
# Create a leaflet map
m <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST)
)
m
# Create a leaflet map with adjusted marker appearance
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("TYPE =", locations$CARE_TYPE, ", Admission Fee =", locations$ADMISSION_FEE, ", Average Medical Cost =", locations$AVERAGE_MEDICAL_COST),
color = "red",  # Change marker border color to red
fillColor = "blue",  # Change marker fill color to blue
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
)
map
# Create a leaflet map with adjusted marker appearance
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = locations,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to red
fillColor = "yellow",  # Change marker fill color to blue
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
)
map
# Create a leaflet map with adjusted marker appearance and a title
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = data,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to black
fillColor = "yellow",  # Change marker fill color to yellow
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
) %>%
addControl(
title = "Visualization for HealthCare Data on Maps",  # Title for the map
position = "topright"  # Position of the title on the map
)
# Create a leaflet map with adjusted marker appearance and a title
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = data,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to black
fillColor = "yellow",  # Change marker fill color to yellow
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
) %>%
# Create a custom title using addControl
addControl(
html = "<h3 style='text-align: center;'>Visualization for HealthCare Data on Maps</h3>",  # HTML for the title
position = "topright"  # Position of the title on the map
)
map
# Create a leaflet map with adjusted marker appearance and a title
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = data,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to black
fillColor = "yellow",  # Change marker fill color to yellow
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
) %>%
# Create a custom title using addControl
addControl(
html = "<h3 style='text-align: center;color: blue;'>Visualization for HealthCare Data on Maps</h3>",  # HTML for the title
position = "topright"  # Position of the title on the map
)
map
# Create a leaflet map with circle markers for geographic locations
# HTML for the title
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = data,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to black
fillColor = "yellow",  # Change marker fill color to yellow
fillOpacity = 1  # Set fill opacity to 1 (fully opaque)
) %>%
# Create a custom title using addControl
addControl(
# HTML for the title
html = "<h3 style='text-align: center;color: blue;'>Visualization for HealthCare Data on Maps</h3>",
# Position of the title on the map
position = "topright"
)
# Loading Hospitals data into data frame
data <- data.frame(Hospitals)
data
# Create a leaflet map with circle markers for geographic locations
map <- leaflet() %>%
addTiles() %>%
addCircleMarkers(
data = data,
label = paste("TYPE =", data$CARE_TYPE, ", Admission Fee =", data$ADMISSION_FEE, ", Average Medical Cost =", data$AVERAGE_MEDICAL_COST),
color = "black",  # Change marker border color to black
fillColor = "yellow",  # Change marker fill color to yellow
fillOpacity = 1  # Set fill opacity to 1
) %>%
# Create a custom title using addControl
addControl(
# HTML for the title
html = "<h3 style='text-align: center;color: blue;'>Visualization for HealthCare Data on Maps</h3>",
# Position of the title on the map
position = "topright"
)
map
#Installing packages that we can explore mining concepts.
install.packages(c("tm","ggplot2","e1071","caret","quanteda","irlba","randomForest"))
#Loading data from system to object unstructured_data
# Now reading my CincyHealthCenters.csv file from system.
unstructured_data <- read.csv("C:/Users/ramin/OneDrive/Desktop/Assignments/R and Tableau/Final Project/CincyHealthCenters.csv", stringsAsFactors=FALSE)
#Let's check the structure of Cancer_data
str(Cancer_Data)
data <- read.csv("C:/Users/ramin/OneDrive/Desktop/Assignments/R and Tableau/Final Project/CincyHealthCenters.csv", stringsAsFactors=FALSE)
#Let's check the structure of Cancer_data
str(data)
# By using tm package (text mining). Data is copied from data to test_data into single string
test_data <- paste(data$SERVICES_PROVIDED, collapse= " ")
test_data
# Now reading my CincyHealthCenters.csv file from system.
data <- read.csv("C:/Users/ramin/OneDrive/Desktop/Assignments/R and Tableau/Final Project/CincyHealthCenters.csv", stringsAsFactors=FALSE)
#Let's check the structure of CincyHealthCenters data
str(data)
#loading textmining package into memory, here I'm using tm
library(tm)
# By using tm package (text mining). Data is copied from data to test_data into single string
test_data <- paste(data$SERVICES_PROVIDED, collapse= " ")
test_data
# I'm using VectorSource function to create source data from test_data and storing into object data_source.
data_source <- VectorSource(test_data)
#Now I'm using Corpus function to store data into one document to compare for futhuer analysis.
data_corpus <- Corpus(data_source)
data_corpus
#Applying Pre-processing techniques.
#removing stopwords
data_corpus<-tm_map(data_corpus, removeWords, stopwords("english"))
#compare new data
inspect(data_corpus)
#remove punctuations.
data_corpus <- tm_map(data_corpus, removePunctuation)
inspect(data_corpus)
#third remove wide spaces
data_corpus <- tm_map(data_corpus, stripWhitespace)
inspect(data_corpus)
#Change into lowercase
data_corpus <-tm_map(data_corpus, content_transformer(tolower))
inspect(data_corpus)
#Creation of frequency matrix for repeated words (dtm - document term matrix)
data_dtm<-DocumentTermMatrix(data_corpus)
#converting document into matrix
data_dtm1 <-as.matrix(data_dtm)
#display data_dtm1
data_dtm1
#Now we are finding most frequently used words in data.
data_frequency <- colSums(data_dtm1)
#sorting data according to data_frequency
data_frequency <- sort(data_frequency, decreasing= TRUE)
#Display structure of data_frequency
str(data_frequency)
#Display data
data_frequency
#loading data_frequency into data frame data_dtm_d
data_dtm_d <- data.frame(word = names(data_frequency), freq=data_frequency)
#display data frame
data_dtm_d
#loading package into memory
library(wordcloud)
# I'm Creating a color vector for the top frequency in Data (in blue)
top_colors <- c("blue")
# I'm Creating a color vector for the remaining frequencies (in different colors)
other_colors <- rainbow(length(data_frequency))
# Combine the color vectors
colors <- c(top_colors, other_colors)
#Loading data names into words object.
words<-names(data_frequency)
#using word cloud function to create a visualization for data_frequency with good colors.
wordcloud(words,data_frequency, colors = colors)
#display visulaization.
wordcloud
# Remove specific words from the data_corpus.
cancer_corpus <- tm_map(cancer_corpus, removeWords, c("services", "title", "outreach", "enrollment"))
# Remove specific words from the data_corpus.
data_corpus <- tm_map(cancer_corpus, removeWords, c("services", "title", "outreach", "enrollment"))
# Remove specific words from the data_corpus.
data_corpus <- tm_map(data_corpus, removeWords, c("services", "title", "outreach", "enrollment"))
#Creation of frequency matrix for repeated words (dtm - document term matrix)
data_dtm<-DocumentTermMatrix(data_corpus)
#converting document into matrix
data_dtm1 <-as.matrix(data_dtm)
#display data_dtm1
data_dtm1
#Now we are finding most frequently used words in data.
data_frequency <- colSums(data_dtm1)
#sorting data according to data_frequency
data_frequency <- sort(data_frequency, decreasing= TRUE)
#Display structure of data_frequency
str(data_frequency)
#Display data
data_frequency
#loading data_frequency into data frame data_dtm_d
data_dtm_d <- data.frame(word = names(data_frequency), freq=data_frequency)
#display data frame
data_dtm_d
# I'm Creating a color vector for the top frequency in Data (in blue)
top_colors <- c("blue")
# I'm Creating a color vector for the remaining frequencies (in different colors)
other_colors <- rainbow(length(data_frequency))
# Combine the color vectors
colors <- c(top_colors, other_colors)
#Loading data names into words object.
words<-names(data_frequency)
#using word cloud function to create a visualization for data_frequency with good colors.
wordcloud(words,data_frequency, colors = colors)
#display visulaization.
wordcloud
#Loading data names into words object.
words<-names(data_frequency)
#using word cloud function to create a visualization for data_frequency with good colors.
wordcloud(words,data_frequency, colors = colors)
#display visulaization.
wordcloud
#loading data_frequency into data frame data_dtm_d
data_dtm_d <- data.frame(word = names(data_frequency), freq=data_frequency)
#display data frame
data_dtm_d
# Combine the color vectors
colors <- rainbow(length(data_frequency))
#Loading data names into words object.
words<-names(data_frequency)
#using word cloud function to create a visualization for data_frequency.
wordcloud(words,data_frequency, colors = colors)
#display visulaization.
wordcloud
#using word cloud function to create a visualization for data_frequency.
wordcloud(words,data_frequency, colors = colors)
#using word cloud function to create a visualization for data_frequency.
wordcloud(words,data_frequency, colors = colors)
#Applying Pre-processing techniques.
#removing stopwords
data_corpus<-tm_map(data_corpus, removeWords, stopwords("english"))
#compare new data
inspect(data_corpus)
#remove punctuations.
data_corpus <- tm_map(data_corpus, removePunctuation)
inspect(data_corpus)
#third remove wide spaces
data_corpus <- tm_map(data_corpus, stripWhitespace)
inspect(data_corpus)
#Change into lowercase
data_corpus <-tm_map(data_corpus, content_transformer(tolower))
inspect(data_corpus)
# Remove specific words from the data_corpus.
data_corpus <- tm_map(data_corpus, removeWords, c("services", "title", "outreach", "enrollment"))
#Creation of frequency matrix for repeated words (dtm - document term matrix)
data_dtm<-DocumentTermMatrix(data_corpus)
#converting document into matrix
data_dtm1 <-as.matrix(data_dtm)
#display data_dtm1
data_dtm1
#Now we are finding most frequently used words in data.
data_frequency <- colSums(data_dtm1)
#sorting data according to data_frequency
data_frequency <- sort(data_frequency, decreasing= TRUE)
#Display structure of data_frequency
str(data_frequency)
#Display data
data_frequency
#loading data_frequency into data frame data_dtm_d
data_dtm_d <- data.frame(word = names(data_frequency), freq=data_frequency)
#display data frame
data_dtm_d
